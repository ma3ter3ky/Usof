openapi: 3.0.3
info:
  title: USOF API
  version: 0.1.0
  description: >
    API for USOF (StackOverflow-like Q&A).
    Contract-first spec (OpenAPI 3).
servers:
  - url: http://localhost:3000/api
    description: Local dev
  - url: https://usof.example.com/api
    description: Production

paths:
  /api/auth/register:
    post:
      summary: Register user and send verification email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [login, full_name, email, password]
              properties:
                login: { type: string, minLength: 3, maxLength: 32 }
                full_name: { type: string, minLength: 1, maxLength: 128 }
                email: { type: string, format: email }
                password: { type: string, minLength: 8 }
      responses:
        '201':
          description: Created + verification email sent
        '400': { description: Validation error }
        '409': { description: Duplicate email/login }

  /api/auth/verify:
    get:
      summary: Verify email by token
      parameters:
        - in: query
          name: token
          required: true
          schema: { type: string }
      responses:
        '200': { description: Email verified }
        '400': { description: Bad/expired token }
        '404': { description: Token not found }

  /api/auth/login:
    post:
      summary: Login (only verified users)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  required: [login, password]
                  properties:
                    login: { type: string }
                    password: { type: string }
                - type: object
                  required: [email, password]
                  properties:
                    email: { type: string, format: email }
                    password: { type: string }
      responses:
        '200': { description: JWT tokens }
        '401': { description: Invalid credentials }
        '403': { description: Email not verified }

  /api/auth/password-reset:
    post:
      summary: Request password reset (sends email if user exists)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email: { type: string, format: email }
      responses:
        '200': { description: Always OK to avoid email enumeration }
  /api/users:
    get:
      summary: 'List users (auth)'
      parameters:
        - { name: page, in: query, schema: { type: integer, minimum: 1 } }
        - { name: limit, in: query, schema: { type: integer, minimum: 1, maximum: 50 } }
        - {
            name: sort,
            in: query,
            schema: { type: string },
            description: 'created_at:desc|asc, rating:desc|asc'
          }
      responses:
        '200': { description: 'OK' }
        '401': { description: 'Unauthorized' }
    post:
      summary: 'Create user (admin)'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [login, full_name, email, password]
              properties:
                login: { type: string, minLength: 3, maxLength: 32 }
                full_name: { type: string, minLength: 1, maxLength: 128 }
                email: { type: string, format: email }
                password: { type: string, minLength: 8 }
                role: { type: string, enum: [user, admin] }
                email_verified: { type: boolean }
      responses:
        '201': { description: 'Created' }
        '400': { description: 'Validation error' }
        '403': { description: 'Forbidden' }

  /api/users/{id}:
    get:
      summary: 'Get user (auth)'
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: 'OK' }
        '401': { description: 'Unauthorized' }
        '404': { description: 'Not found' }
    patch:
      summary: 'Update user (self or admin)'
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: 'Self: only full_name/profile_picture; Admin: full_name/role/email_verified/rating'
      responses:
        '200': { description: 'OK' }
        '400': { description: 'Validation error' }
        '401': { description: 'Unauthorized' }
        '403': { description: 'Forbidden' }
        '404': { description: 'Not found' }
    delete:
      summary: 'Delete user (admin)'
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '204': { description: 'No Content' }
        '401': { description: 'Unauthorized' }
        '403': { description: 'Forbidden' }
        '404': { description: 'Not found' }
  /api/posts:
    get:
      summary: 'List posts'
      parameters:
        - { name: page, in: query, schema: { type: integer, default: 1 } }
        - { name: limit, in: query, schema: { type: integer, default: 10 } }
        - { name: author_id, in: query, schema: { type: integer } }
        - { name: category_id, in: query, schema: { type: integer } }
        - {
            name: order,
            in: query,
            schema:
              { type: string, enum: [created_at:asc, created_at:desc, rating:asc, rating:desc] }
          }
      responses:
        '200': { description: 'OK' }
    post:
      summary: 'Create post (auth)'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, body]
              properties:
                title: { type: string, minLength: 3 }
                body: { type: string, minLength: 1 }
                categoryIds: { type: array, items: { type: integer } }
      responses:
        '201': { description: 'Created' }

  /api/posts/{id}:
    get:
      summary: 'Get post by id'
      parameters:
        - { name: id, in: path, required: true, schema: { type: integer } }
      responses:
        '200': { description: 'OK' }
        '404': { description: 'Not Found' }
    patch:
      summary: 'Update post (owner or admin)'
      responses:
        '200': { description: 'Updated' }
        '403': { description: 'Forbidden' }
    delete:
      summary: 'Delete post (owner or admin)'
      responses:
        '200': { description: 'Deleted' }
        '403': { description: 'Forbidden' }
  /api/posts/{id}/status:
    patch:
      summary: 'Set post status (admin)'
      description: 'Toggle a post between active and inactive without modifying its content.'
      parameters:
        - { name: id, in: path, required: true, schema: { type: integer } }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status: { type: string, enum: [active, inactive] }
      responses:
        '200': { description: 'Status updated' }
        '400': { description: 'Validation error' }
        '401': { description: 'Unauthorized' }
        '403': { description: 'Forbidden (admin only)' }
        '404': { description: 'Post not found' }

  /api/categories:
    get: { summary: 'List categories', responses: { '200': { description: 'OK' } } }
    post:
      summary: 'Create category (admin)'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string, minLength: 3, maxLength: 64 }
                slug: { type: string, description: 'optional; generated from name if missing' }
      responses:
        '201': { description: 'Created' }
        '400': { description: 'Validation error' }
        '403': { description: 'Forbidden' }
        '409': { description: 'Duplicate name/slug' }
  /api/categories/{id}:
    get:
      summary: 'Get category'
      parameters: [{ name: id, in: path, required: true, schema: { type: integer } }]
      responses: { '200': { description: 'OK' }, '404': { description: 'Not found' } }
    patch:
      summary: 'Update category (admin)'
      parameters: [{ name: id, in: path, required: true, schema: { type: integer } }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string, minLength: 3, maxLength: 64 }
                slug: { type: string }
      responses:
        '200': { description: 'OK' }
        '400': { description: 'Validation error' }
        '403': { description: 'Forbidden' }
        '404': { description: 'Not found' }
        '409': { description: 'Duplicate name/slug' }
    delete:
      summary: 'Delete category (admin)'
      parameters: [{ name: id, in: path, required: true, schema: { type: integer } }]
      responses:
        '204': { description: 'No Content' }
        '403': { description: 'Forbidden' }
        '404': { description: 'Not found' }
  /api/users/avatar:
    patch:
      summary: 'Upload user avatar (auth)'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: 'PNG/JPEG/WEBP, max 2MB'
      responses:
        '200': { description: 'Avatar updated; returns { ok, path, user }' }
        '400': { description: 'Validation error (size/type/missing)' }
        '401': { description: 'Unauthorized' }

  /api/posts/{id}/images:
    post:
      summary: 'Upload post image (author or admin)'
      parameters:
        - { name: id, in: path, required: true, schema: { type: integer } }
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: 'PNG/JPEG/WEBP, max 2MB'
      responses:
        '201': { description: 'Created; returns { ok, image }' }
        '400': { description: 'Validation error' }
        '401': { description: 'Unauthorized' }
        '403': { description: 'Forbidden (not author/admin)' }
        '404': { description: 'Post not found' }
  /api/posts/{postId}/comments:
    get:
      summary: 'List comments (tree-ordered)'
      parameters:
        - { name: postId, in: path, required: true, schema: { type: integer } }
      responses:
        '200': { description: 'OK (flat array ordered by path)' }
    post:
      summary: 'Create comment (auth), optional reply'
      parameters:
        - { name: postId, in: path, required: true, schema: { type: integer } }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [body]
              properties:
                body: { type: string, minLength: 1, maxLength: 5000 }
                parent_id: { type: integer, description: 'Optional parent comment id' }
      responses:
        '201': { description: 'Created' }
        '400': { description: 'Validation or depth limit' }
        '404': { description: 'Post not found' }

  /api/comments/{id}:
    patch:
      summary: 'Update comment (owner/admin)'
      parameters:
        - { name: id, in: path, required: true, schema: { type: integer } }
      responses:
        '200': { description: 'Updated' }
        '401': { description: 'Unauthorized' }
        '403': { description: 'Forbidden' }
        '404': { description: 'Not found' }
    delete:
      summary: 'Delete comment (owner/admin)'
      parameters:
        - { name: id, in: path, required: true, schema: { type: integer } }
      responses:
        '200': { description: 'Deleted' }
        '401': { description: 'Unauthorized' }
        '403': { description: 'Forbidden' }
        '404': { description: 'Not found' }

  /api/comments/{id}/status:
    patch:
      summary: 'Set comment status (admin)'
      description: 'Activate or hide a comment without editing its content.'
      parameters:
        - { name: id, in: path, required: true, schema: { type: integer } }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status: { type: string, enum: [active, inactive] }
      responses:
        '200': { description: 'Status updated' }
        '400': { description: 'Validation error' }
        '401': { description: 'Unauthorized' }
        '403': { description: 'Forbidden (admin only)' }
        '404': { description: 'Comment not found' }
  /api/likes:
    post:
      summary: 'Upsert like/dislike for post or comment'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [target_type, target_id, value]
              properties:
                target_type: { type: string, enum: [post, comment] }
                target_id: { type: integer }
                value: { type: integer, enum: [-1, 1] }
      responses:
        '200': { description: 'Created/Updated/Unchanged' }
        '400': { description: 'Validation error' }
        '401': { description: 'Unauthorized' }
        '404': { description: 'Target not found' }

    delete:
      summary: 'Remove like/dislike'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [target_type, target_id]
              properties:
                target_type: { type: string, enum: [post, comment] }
                target_id: { type: integer }
      responses:
        '200': { description: 'Removed (idempotent)' }
        '401': { description: 'Unauthorized' }
